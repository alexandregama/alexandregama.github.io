[{"categories":["Ruby"],"contents":"Hey!\nDay 2 of 30 - Ruby Coding Challenges in 30 Days. This is the post version of the Youtube video\nContinuing to stretch our arms and legs to the long run, I\u0026rsquo;m going to solve a simple and common algorithm:\n How Many Prime Numbers Are in a Given Array\n How does my brain work when it comes to solving algorithms? Just get the job done!\n Forget about good practices Forget about code design Especially forget performance  I really love to respect my brain because, well, he can be against me\nToday I\u0026rsquo;ll solve this problem with a poor design and you\u0026rsquo;ll feel that sensation that we should not be friends anymore.\nBut I promise that I\u0026rsquo;m going to write AT LEAST 4 versions of this Algorithm and maybe you might reconsider our friendship s2\nLet\u0026rsquo;s start this conversation refreshing our brain and I hope you don\u0026rsquo;t mind:\n#1 What is a Prime Number short answer:\n A natural number greater than 1 that is evenly divided only by 1 and itself\n Wikipedia has a really sexy answer.\nGoing through some examples:\n 1 is prime 2 is prime 3 is prime 4 is not prime. It\u0026rsquo;s divided by 2 5 is prime 6 is not prime. It\u0026rsquo;s divided by 2 and 3 7 is prime 8 is not prime. It\u0026rsquo;s divided by 2 and 4 9 is not prime. It\u0026rsquo;s divided by 3 10 is not prime. It\u0026rsquo;s divided by 2 and 5  Yep, you got it.\n#2 Prime Number Algorithm in Ruby Are you familiar with Ruby? If yes, then probably you\u0026rsquo;re already aware of the Prime library. This is an unfair advantage.\nI\u0026rsquo;m going to talk about that later but for now let\u0026rsquo;s stick with the old and good manual process.\nIt\u0026rsquo;s time to create the code skeleton. A method waiting for an array:\ndef count_prime_number_version_1(array) # magic will happen here end array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] puts count_prime_number_version_1(array) Just for clarity, I\u0026rsquo;m going to create a variable, which indicates the total count:\ndef count_prime_number_version_1(array) prime_count = 0 # a loop expression here return prime_count end array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] puts count_prime_number_version_1(array) It\u0026rsquo;s time to go through the array and ask for each item if they are prime or not\ndef count_prime_number_version_1(array) prime_count = 0 for item in array end return prime_count end We know that 1 is not prime, so why not just ignore it?\nIn Ruby we use next to say: \u0026ldquo;Hey Ruby, forget this item and jump to the next item\u0026rdquo;\nAre you coming from Java, Python or Javascript? That\u0026rsquo;s the same with continue\ndef count_prime_number_version_1(array) prime_count = 0 for item in array next if item == 1 end return prime_count end How can we validate in Ruby if a number is divided by another number, resulting in a remainder zero?\nWith percent %\n# checking if the remainder value is zero when dividing an item by count item % count == 0 Ok, now we can write a while loop that\n given an item check if there\u0026rsquo;s a number that divides the item, remaining in zero  is_prime = true number = item - 1 while number \u0026gt; 1 if item % number != 0 number = number - 1 else is_prime = false break end end Notice that\n we\u0026rsquo;re using is_prime to indicate when an item is, well, prime we\u0026rsquo;re using break to stop the while loop once the item is divided by a number, which already means that it\u0026rsquo;s not prime  It\u0026rsquo;s time to risk our virtual friendship. The complete code:\ndef count_prime_number_version_1(array) prime_count = 0 for item in array next if item == 1 is_prime = true number = item - 1 while number \u0026gt; 1 if item % number == 0 is_prime = false break else number = number - 1 end end if is_prime prime_count = prime_count + 1 end end return prime_count end array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] puts count_prime_number_version_1(array) What I want to prove?\n I write terrible code at first and I\u0026rsquo;m not even sorry I don\u0026rsquo;t worry about design, performance, etc on the first version. Just get the job done (and lose some friends on the way) For beginners, it\u0026rsquo;s probably a good way to go through this process  As I said, this algorithm will become beautiful (hopefully), or at least better in the upcoming video and we\u0026rsquo;ll be friends again.\nSee you\nTwitter Youtube Instagram Linkedin\n  ","permalink":"https://www.alexgama.io/ruby/30-ruby-coding-challenges-in-30-days/ruby-coding-challenge-2-prime-numbers-algorithm/","tags":["Ruby Series","30DaysCoding"],"title":"Day 2 of 30 - Ruby Coding Challenge - Ugly Prime Algorithm"},{"categories":["Ruby"],"contents":"Hey friend!\nWe\u0026rsquo;re going to have some fun by solving 30 Coding Challenges using Ruby for:\n folks who are just getting started folks who just want to stretch their brain a little bit more folks who just want to have fun in preparing themselves for coding interviews  Why am I doing this?\n Just want to help the community grow :) Just want to validate my Youtube gears (if you want to watch my videos 😬)  What is this about?\n We\u0026rsquo;ll explore 30 Coding Challenges involving Numbers, Arrays, Strings and Hashes Don\u0026rsquo;t worry about Ruby. It\u0026rsquo;s all about problem-solving skills and not about programming languages You\u0026rsquo;ll easily be able to apply the same concepts in your favorite language, like Java, Python, JavaScript or even Haskell 🤯 I\u0026rsquo;m going to explain all of them through these tutorials and videos You\u0026rsquo;ll see some explanations with my terrible handwriting skills  What is this not about?\n No, it\u0026rsquo;s not about decorating code for coding interviews. But it can help you No, it\u0026rsquo;s not about data structures. But I\u0026rsquo;m preparing a specific course for that  What about the Ruby environment?\n No excuses, you don\u0026rsquo;t need that Here is the link for a Ruby Online Compiler, which I\u0026rsquo;m going to share all of the code and you can also play around  How does this course is structured?\nFirst of all, I wouldn\u0026rsquo;t say that this is a course but I would say that we have some structure:\n we\u0026rsquo;re going to solve 30 challenges in 30 days. If you\u0026rsquo;re watching or reading this later, you can do that in 1 day of course :) Just to organize: Integers, Strings, Arrays, and Hash Problems and Algorithms  Hopefully, you\u0026rsquo;ll feel comfortable in solving problems like the famous Factorial and Fibonacci and not so famous Amicable Algorithm\nDon\u0026rsquo;t worry about the names, all the solutions will be simple\nWhat else?\n you\u0026rsquo;ll get more exercises on the website if you want hopefully, if you like this series, let\u0026rsquo;s do the same thing with JavaScript, Java, Python, etc I\u0026rsquo;m creating a Free Ruby course if you want to go a little bit deeper on that. I\u0026rsquo;m creating a Free Data Structures and Algorithms course if you want a more organized way to solve algorithms.  The most important goal: It\u0026rsquo;s all about having fun 🕺💃 while solving simple but great coding challenges.\n  I\u0026rsquo;ll write a new article here every single day for the next 30 days in case you\u0026rsquo;re a more reading person\nI hope you enjoy the journey as much as I will and see you soon :)\nLet\u0026rsquo;s keep in touch and don\u0026rsquo;t forget to signup for my weekly newsletter 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/ruby/30-ruby-coding-challenges-in-30-days/intro/","tags":["Ruby Series","30daysCoding"],"title":"30 Ruby Coding Challenges in 30 Days - Intro"},{"categories":["Ruby"],"contents":"Hey friend!\nThis is the first Part of this series of 30 Coding Challenges in Ruby for:\n folks who are just getting started folks who just want to stretch their brain a little bit folks who just want to have fun in preparing themselves for coding interviews  What about the Ruby environment?\n No excuses, you don\u0026rsquo;t need that Here is the link for a Ruby Online Compiler, which I\u0026rsquo;m going to share all of the code and you can also play around It\u0026rsquo;s all about problem-solving skills and concepts, not about programming languages :)  The most important goal: It\u0026rsquo;s all about having fun 🕺💃 while solving simple but great coding challenges.\nI\u0026rsquo;m the Problem, Nice to Meet You  Given an array of numbers, we want to count how many items are greater than 5\n Com\u0026rsquo;on, give us something more difficult and interesting 😒\nI know, I know what you\u0026rsquo;re thinking but this is just to start our journey together 😬\nI\u0026rsquo;m going to break this down into 4 steps:\n Logic to solve the problem Solving with a classic for loops Organizing our code with methods Bonus: Meeting Blocks in Ruby  Are you ready? Let\u0026rsquo;s get into it : )\n#1 Logic to Solve the Problem Yes, the logic is pretty simple. Again, just to stretch our legs and arms to the run\n Given an array Go through all of the numbers For each number you compare if the number is greater than 5 You increment a variable (let\u0026rsquo;s call it count) You print the variable count after going through the array  #2 Classic For Loop Expression Again, don\u0026rsquo;t worry about the Ruby syntax. Focus on concepts and logic.\nFor the code below we\u0026rsquo;ve created a classic for loop expression and for each item in the given array, we\u0026rsquo;re checking if the number is greater than 5, just like the previous logic\narray = [15, 7, 3, 2, 17, 12, 1] count = 0; for item in array if item \u0026gt; 5 count += 1 end end puts count # prints out the count value, which is 4. Nice #3 Organizing with a Method Nothing special here. Just organizing the kitchen with a method.\nNotice that we\u0026rsquo;re taking a number as an argument, which will be the number used to compare the items in the array\ndef how_many_are_greater_than(number, array) count = 0; for item in array if item \u0026gt; number count += 1 end end return count # in Ruby we don\u0026#39;t need to use return btw end array = [15, 7 , 3, 2, 17, 12, 1] count = how_many_are_greater_than(5, array) # a little bit better, isn\u0026#39;t it? puts count Pretty simple, right?\nWhat about doing that in a more Rubyish way? 😏\n#4 Hipster Time: Blocks in Ruby Bonus hipster time.\nRuby (as many other languages) has its own way to do a few things and that is called Ruby Way or Rubyish Way to do things\nAn array in Ruby provides a method called count(), which receives a block that can be an expression to be evaluated\narray.count do |item| item \u0026gt; number end Notice that:\n item: is just a single item from our array. This block magically automatically executes a for loop expression item \u0026gt; number: is the expression to be evaluated for each item  The complete code:\ndef how_many_are_greater_than_rubyish(number, array) array.count do |item| item \u0026gt; number end end array = [15, 7 , 3, 2, 17, 12, 1] count = how_many_are_greater_than_rubyish(5, array) puts count But wait. Where is the count variable and how we return it? Brilliant question.\nRuby automatically increments an internal variable each time the expression item \u0026gt; number is evaluated to true and keeps the result in this\ninternal variable.\nWhen the execution is finished, Ruby automatically returns the result for us\nDon\u0026rsquo;t believe me? Check the code below:\ndef how_many_are_greater_than_rubyish(number, array) return array.count do |item| item \u0026gt; number end end array = [15, 7 , 3, 2, 17, 12, 1] count = how_many_are_greater_than_rubyish(5) puts count Now I\u0026rsquo;m explicitly using the return keyword, which will behave in the same way, returning the final result after the expression being evaluated for each item in the array.\nThis is a more declarative approach than an imperative one, but this is a discussion for an upcoming article.\nWell done, Ruby! 💪\n  That\u0026rsquo;s it. Thanks for your visit, really appreciate your time and see you soon :)\nLet\u0026rsquo;s keep in touch and don\u0026rsquo;t forget to signup for my weekly newsletter\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/ruby/30-ruby-coding-challenges-in-30-days/ruby-coding-challenge-1-arrays-and-blocks/","tags":["Ruby Series","30DaysCoding"],"title":"Day 1 of 30 - Ruby Coding Challenge - Arrays and Blocks"},{"categories":["Java"],"contents":"Hello!\nThis is Part 2 of the long CDI Series in Java that contains:\n Part 1: Factory in CDI with the @Produces annotation Part 2: Polymorphism with CDI Qualifiers Part 3: Events and Observers in CDI Part 4: CDI and Lazy Initialization Part 5: Interceptors in CDI Part 6: CDI Dependency Injection and Alternatives Part 7: Working with CDI Decorators  In this part, we\u0026rsquo;re going to explore how CDI Qualifier works and how it can help us in Java with Dependency Injection and Polymorphism!\nWe\u0026rsquo;ll use the scenario from the previous part, when we talked about the famous @Produces annotation.\nLet\u0026rsquo;s remember that scenario and add a few more steps\n Checkout class and log on the console when a checkout is finished on our pseudo online store SimpleLogger class that will have the logic to print out a log message Logger object choosing the desired Log mode; Debug, Info, or Warn mode  Disclaimer: I\u0026rsquo;m not focusing on a good code design. I\u0026rsquo;m just playing around with some code snippets to be easier to understand :)\nAre you ready? Let\u0026rsquo;s get into it\n#1: Using CDI 2.0 in a Standalone Mode It\u0026rsquo;s a good time to review the code from the previous part of this series, which runs CDI in a standalone mode. it\u0026rsquo;s nice and easier for our journey\nFirst of all, let\u0026rsquo;s create the MainApplication class that will start the CDI Container.\nJust a reminder, in the following code we\u0026rsquo;re using CDI 2.0, but Qualifiers came out in the version 1.0. Cool\npublic class MainApplication { public static void main(String[] args) { try (CDI\u0026lt;object\u0026gt; container = new Weld().initialize()) { Checkout checkout = container.select(Checkout.class).get(); checkout.finishCheckout(); } } } Of course, this code doesn\u0026rsquo;t compile since we don\u0026rsquo;t have the Checkout class yet.\n#2: Creating the Checkout Class Let\u0026rsquo;s create the Checkout class, which uses the SimpleLogger classes:\npublic class Checkout { @Inject private SimpleLogger logger; public void finishCheckout() { logger.log(\u0026#34;Finishing Checkout\u0026#34;); // our really advanced logger 😅 \t} } That code doesn\u0026rsquo;t compile either. It\u0026rsquo;s time to create the SimpleLogger class.\n#3: Creating the SimpleLogger Class This class will just log a message based on a configuration mode.\npublic class SimpleLogger { private LogConfiguration configuration; public SimpleLogger(LogConfiguration configuration) { this.configuration = configuration; } public void log(String message) { if (configuration.isInDebugMode()) { System.out.println(\u0026#34;DEBUG LOG: \u0026#34; + message); } else if (configuration.isInInfoMode()) { System.out.println(\u0026#34;DEBUG LOG: \u0026#34; + message); } else { System.out.println(\u0026#34;DEFAULT LOG: \u0026#34; + message); } } } As you can see, we have the class LogConfiguration, which configures the mode to be used when printing out a log message.\n#4: Creating the LogConfiguration class This class will contain 3 modes to be passed to the SimpleLogger class:\npublic class LogConfiguration { private boolean infoMode; private boolean debugMode; private boolean warnMode; public LogConfiguration(boolean infoMode, boolean debugMode, boolean warnMode) { this.infoMode = infoMode; this.debugMode = debugMode; this.warnMode = warnMode; } public boolean isInInfoMode() { return infoMode; } public boolean isInDebugMode() { return debugMode; } public boolean isInWarnMode() { return warnMode; } } Notice that the SimpleLogger class should have a LogConfiguration object built.\nIn this case, we should create a Factory to teach CDI how to create a SimpleLogger object.\nLet\u0026rsquo;s move on and create the factory!\n#5: Factory With @Produces in CDI We\u0026rsquo;re going to use the @Produces annotation to create a Factory to build a SimpleLogger object.\nThis object will be built with the boolean debugMode as true to indicate that a message should be printed out in the debug mode.\npublic class SimpleLoggerFactory { @Produces public SimpleLogger createLogger() { LogConfiguration logInDebugMode = new LogConfiguration(false, true, false); // I know, taking 3 booleans as parameters...🙄  return new SimpleLogger(logInDebugMode); } } Great! So far we\u0026rsquo;ve just taken a quick overview from the previous post.\n#6: More Logger Modes As you may notice, so far, we have just 1 mode to work with Logger, the Debug mode!\nBut we\u0026rsquo;d like to use another Logger mode, for example, Info mode. How can we do that?\nThe first and simplest way to solve this: Create another method in the Factory, which creates a Logger object that uses the Info mode\nLet\u0026rsquo;s explore this solution!\npublic class SimpleLoggerFactory { @Produces public SimpleLogger createDebugLogger() { // yes, I renamed it  boolean debugMode = true; // just to be clear that the debug mode is on  LogConfiguration logInDebugMode = new LogConfiguration(false, debugMode, false); return new SimpleLogger(logInDebugMode); } @Produces public SimpleLogger createInfoLogger() { //new method here :)  boolean infoMode = true; LogConfiguration logInInfoMode = new LogConfiguration(infoMode, false, false); return new SimpleLogger(logInInfoMode); } } Yes, we renamed the previous method just to be clearer that a Debug Logger will be created and, besides that, we\u0026rsquo;ve created a new method called createInfoLogger().\nNotice that both methods are using the @Produces annotation and, yes, CDI allows us to have many methods annotated with @Produces annotation in the same class.\nLet\u0026rsquo;s run the code?\nWELD-001409: Ambiguous dependencies for type SimpleLogger with qualifiers @Default at injection point [BackedAnnotatedField] @Inject private com.craftcoder.cdi.qualifiers.Checkout.logger at com.craftcoder.cdi.qualifiers.Checkout.logger(Checkout.java:0) Possible dependencies: - Producer Method [SimpleLogger] with qualifiers [@Any @Default] declared as [[BackedAnnotatedMethod] @Produces public com.hackingcode.cdi.qualifiers.SimpleLoggerFactory.createInfoLogger()], - Producer Method [SimpleLogger] with qualifiers [@Any @Default] declared as [[BackedAnnotatedMethod] @Produces public com.hackingcode.cdi.qualifiers.SimpleLoggerFactory.createDebugLogger()] Nice, an exception has thrown on our faces! What happened?\nWhen CDI tries to inject a SimpleLogger object based on the Factory:\n CDI doesn\u0026rsquo;t understand and can\u0026rsquo;t choose which method should be used when the SimpleLogger object is needed.\n CDI will angrily say:\n Hey, I have 2 methods that create the object that you are interested in. You should teach me which one I should pick up.\n And that really makes sense. CDI doesn\u0026rsquo;t have the ability to understand your desire when you\u0026rsquo;re injecting a dependency if you have more than 2 objects to be returned.\nLet\u0026rsquo;s teach CDI how to pick up the desired Logger to be injected.\n#7: Polymorphism With @Qualifiers There is a brilliant annotation called @Qualifiers since the version 1.0.\nWith this annotation, we can teach CDI which method should be used and CDI tries to create the correct object for us.\nFirst of all, we need to mark our createDebugLogger() method, indicating that this method will use the Debug mode.\nHow can we mark classes or methods in Java? Using annotations! So, let\u0026rsquo;s create our own annotation 😈\n@Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.FIELD}) public @interface DebugMode { } Easy, right?\nNotice that the ElementType on the annotation indicates where this annotation should be used. In our case, this will be used on methods and fields.\nWe\u0026rsquo;ve created the DebugMode annotation and we will mark the method createDebugLogger()\npublic class SimpleLoggerFactory { @Produces @DebugMode public SimpleLogger createDebugLogger() { boolean debugMode = true; LogConfiguration logInDebugMode = new LogConfiguration(false, debugMode, false); return new SimpleLogger(logInDebugMode); } //another method here.. } It\u0026rsquo;s time to CDI be aware of that new annotation by using the @Qualifier annotation:\n@Qualifier @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface DebugMode { }  Now CDI knows that the DebugMode annotation is a qualified annotation and will be used to filter which method should be used when a new Logger is requested.\n Let\u0026rsquo;s run it?\nINFO: WELD-ENV-002003: Weld SE container STATIC_INSTANCE initialized INFO LOG: Finishing Checkout Feb 15, 2017 8:09:57 AM org.jboss.weld.environment.se.WeldContainer shutdown INFO: WELD-ENV-002001: Weld SE container STATIC_INSTANCE shut down Is everything working properly?\nNot so fast! As you can see, we are printing out the INFO LOG, right? But we\u0026rsquo;d like to print out the DEBUG LOG.\nYes, CDI requires us to specify explicitly which Qualifier should be used. If you don\u0026rsquo;t pass any Qualifier, CDI will use its default Qualifier, called\u0026hellip;@Default!\nBehind the curtains, the method createInfoLogger() uses a @Default qualifier annotation:\npublic class SimpleLoggerFactory { @Produces @Default // yes, it is here by default, however you dont\u0026#39;t need to use it explicitly!  public SimpleLogger createInfoLogger() { boolean infoMode = true; LogConfiguration logInInfoMode = new LogConfiguration(infoMode, false, false); return new SimpleLogger(logInInfoMode); } } And notice that CDI will configure the @Default Qualifier on the injection point:\npublic class Checkout { @Inject @Default // it\u0026#39;s here again!  private SimpleLogger logger; public void finishCheckout() { logger.log(\u0026#34;Finishing Checkout\u0026#34;); } } So, keep in mind that we always have the @Default annotation when we don\u0026rsquo;t specify a CDI Qualifier.\n#8: Choosing Another Qualifier in the Injection Point Now it\u0026rsquo;s easy to choose the Debug Mode on the Injection Point:\npublic class Checkout { @Inject @DebugMode // debug mode now  private SimpleLogger logger; public void finishCheckout() { logger.log(\u0026#34;Finishing Checkout\u0026#34;); } } Let\u0026rsquo;s run it again!\nINFO: WELD-ENV-002003: Weld SE container STATIC_INSTANCE initialized DEBUG LOG: Finishing Checkout Feb 15, 2017 8:26:41 AM org.jboss.weld.environment.se.WeldContainer shutdown INFO: WELD-ENV-002001: Weld SE container STATIC_INSTANCE shut down Now everything is working perfectly!\n#9: Creating More Log Modes using Qualifiers It\u0026rsquo;s worth mentioning that:\n Qualifiers bring to us the ability to use polymorphism at the Injection Point\n So, it\u0026rsquo;s time to create a new Qualifier to the INFO and WARN modes to get the benefits from Polymorphism and CDI:\n@Qualifier @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.FIELD}) public @interface InfoMode { } @Qualifier @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.FIELD}) public @interface WarnMode { } And the entirely SimpleLoggerFactory class should be as follows:\npublic class SimpleLoggerFactory { @Produces @DebugMode public SimpleLogger createDebugLogger() { boolean debugMode = true; LogConfiguration logInDebugMode = new LogConfiguration(false, debugMode, false); return new SimpleLogger(logInDebugMode); } @Produces @InfoMode public SimpleLogger createInfoLogger() { boolean infoMode = true; LogConfiguration logInInfoMode = new LogConfiguration(infoMode, false, false); return new SimpleLogger(logInInfoMode); } @Produces @WarnMode public SimpleLogger createWarnLogger() { boolean warnMode = true; LogConfiguration logInWarnMode = new LogConfiguration(false, false, warnMode); return new SimpleLogger(logInWarnMode); } } Using the WARN mode:\n@Inject @WarnMode private SimpleLogger logger; If you run the code again, the message will be printed out using WARN mode!\n#10: @Qualifiers With Arguments We\u0026rsquo;ve created 3 Log modes so far. But what would be your life if we needed 5 more modes?\nCreating 5 more annotations doesn\u0026rsquo;t sound like a good idea.\nIt\u0026rsquo;s time to refactor our code by using Qualifiers with arguments to have less code being written.\nYes, Qualifiers accept arguments in their annotations!\nWe\u0026rsquo;ll create a new annotation called @LoggerMode, a more generic annotation:\n@Qualifier @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.FIELD}) public @interface LoggerMode { } We can use an Enum to indicate which mode we would like to use in the annotation:\nenum Mode { DEBUG, INFO, WARN } The complete Qualifier code will be:\n@Qualifier @Retention(RetentionPolicy.RUNTIME) @Target({ElementType.METHOD, ElementType.FIELD}) public @interface LoggerMode { Mode desiredMode(); } Pretty cool! We just need to change the methods on the Factory class to use the new annotation with the desiredMode option configured:\npublic class SimpleLoggerFactory { @Produces @LoggerMode(desiredMode = Mode.DEBUG) public SimpleLogger createDebugLogger() { ... } @Produces @LoggerMode(desiredMode = Mode.INFO) public SimpleLogger createInfoLogger() { ... } @Produces @LoggerMode(desiredMode = Mode.WARN) public SimpleLogger createWarnLogger() { ... } } Now we can remove all the 3 annotations and end up by having only 1, the @LoggerMode annotation!\nIf we have 5 more Log Modes to be created, don\u0026rsquo;t worry, you can create 5 more types on your Enum! Brilliant!\nThat\u0026rsquo;s it! I hope you\u0026rsquo;ve learned 1 thing or 2 and thanks for stopping by, really appreciate :)\nSee you on the next Part 3 - Observing Events\nLet\u0026rsquo;s keep in touch and don\u0026rsquo;t forget to signup for my weekly newsletter 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/java/cdi-series/cdi-in-java-series-part-2-qualifiers/","tags":["CDI Series","Beginners Tutorial"],"title":"CDI in Java - Part 2 - Polymorphism with CDI Qualifiers"},{"categories":["Java"],"contents":"Hey friend!\nThis is Part 1 of the CDI Series in Java that contains:\n Part 1: Factory in CDI with the @Produces annotation Part 2: CDI Qualifiers Part 3: Events and Observers in CDI Part 4: CDI and Lazy Initialization Part 5: Interceptors in CDI Part 6: CDI Dependency Injection and Alternatives Part 7: Working with CDI Decorators  In this post, we\u0026rsquo;re going to take a look at the amazing @Produces annotation, which is probably one of the most important and used annotations in the CDI world in Java!\nSetting the expectation\nBefore getting started, let\u0026rsquo;s be on the same page. I\u0026rsquo;m not gonna go into so much detail about CDI and Dependency Injection because I\u0026rsquo;m kind of assuming you already know something about it. Forgive me if I\u0026rsquo;m wrong. Don\u0026rsquo;t be mad.\nThis series will be about some specific points on how to use CDI in your code. Let me know if you want more detailed points :)\nProblem contextualization\nIt\u0026rsquo;s time to contextualize our challenge! We\u0026rsquo;d like to create the following steps for our pseudo online store:\n Create a Checkout class to\u0026hellip; you know\u0026hellip; buy something Log the operations on the console. Create a Logger class to keep this log in its own class. The famous cohesion. Customize this Logger to receive a Configuration, which indicates which Log Mode should be used  Pretty simple, isn\u0026rsquo;t it? Let\u0026rsquo;s jump crazily into code!\n#1: Creating the Main class in CDI 2.0 Before creating the main class to execute our CDI code, let\u0026rsquo;s create the important Checkout class:\npublic class Checkout { public void finishCheckout() { System.out.println(\u0026#34;Finishing Checkout\u0026#34;); } } Great!\nIn this example, we\u0026rsquo;re going to use CDI 2.0, which allows us to use CDI in a standalone fashion!\nLet\u0026rsquo;s bring the CDI power by creating a CDI Container, which allows us to instantiate objects\nCDI\u0026lt;Object\u0026gt; container = new Weld().initialize() Nice! Below we have a Checkout object instance created by CDI:\npublic class MainApplication { public static void main(String[] args) { try (CDI\u0026lt;Object\u0026gt; container = new Weld().initialize()) { Checkout checkout = container.select(Checkout.class).get(); checkout.finishCheckout(); } } } Pretty easy, isn\u0026rsquo;t it? Notice the following code:\nCheckout checkout = container.select(Checkout.class).get(); That code is the same as the following, which is injecting a Checkout object using the remarkable @Inject annotation:\n@Inject private Checkout checkout; Now, it\u0026rsquo;s time to execute our CDI example, to validate our environment!\nYou will see on your console something like this:\nINFO: WELD-ENV-002003: Weld SE container STATIC_INSTANCE initialized Finishing Checkout Great! Everything is up and running!\n#2: Creating a Specialized Class for Logger Logging is something important for us. To have good cohesion, let\u0026rsquo;s create a class that is responsible for logging messages.\nThis class will be called SpecialLogger, as you can see below:\npublic class SpecialLogger { public void log(String message) { System.out.println(\u0026#34;LOG: \u0026#34; + message); //ok, not that special 😒  } } Perfect! Now we\u0026rsquo;d like to update the Checkout class to use the newest Logger class:\npublic class Checkout { private SpecialLogger logger; public void finishCheckout() { logger.log(\u0026#34;Finishing Checkout\u0026#34;); } } Sounds good, because now the Checkout class doesn\u0026rsquo;t know how a Logger works under the hood, we\u0026rsquo;re just using it!\n#3: Logging Mode to Log Messages Through a Special Configuration it would be great to have a way to change the mode that the log is printed out. These modes could be the following:\n Debug Mode Info Mode Error Mode Etc.  Our SpecialLogger should receive the desired Log Mode and print out the message using it.\nIt\u0026rsquo;s time to create the Configuration class that will receive the Log mode:\npublic class LogConfiguration { private boolean infoMode; private boolean debugMode; public LogConfiguration(boolean infoMode, boolean debugMode) { this.infoMode = infoMode; this.debugMode = debugMode; } public boolean isInInfoMode() { return infoMode; } public boolean isInDebugMode() { return debugMode; } } I know, that\u0026rsquo;s not the best code design, but I just want to keep the example clean and simple.\nLet\u0026rsquo;s change the SpecialLogger class to be able to Log a message based on the LogConfiguration:\npublic class SpecialLogger { @Inject private LogConfiguration configuration; public SpecialLogger(LogConfiguration configuration) { this.configuration = configuration; } public void log(String message) { if (configuration.isInDebugMode()) { System.out.println(\u0026#34;DEBUG LOG: \u0026#34; + message); } else if (configuration.isInInfoMode()) { System.out.println(\u0026#34;DEBUG LOG: \u0026#34; + message); } else { System.out.println(\u0026#34;DEFAULT LOG: \u0026#34; + message); } } } As you can see, we\u0026rsquo;re validating whether the log should use the Debug or Info mode, otherwise, the message must be printed out by using the Default mode.\nLet\u0026rsquo;s try to run it:\nWELD-001408: Unsatisfied dependencies for type SpecialLogger with qualifiers @Default at injection point [BackedAnnotatedField] @Inject private com.hackingcode.cdi.produces.Checkout.logger Yes, an exception will be thrown on our faces. And that makes sense. CDI does not know how to inject the SpecialLogger object yet.\nCDI, behind the scenes, will execute the following steps:\n Hey, I can see that you need a SpecialLogger object here. That\u0026rsquo;s ok for me. I\u0026rsquo;ll try to find this class around your classpath I\u0026rsquo;ve found this SpecialLogger class on your classpath I\u0026rsquo;ll try to create a new SpecialLogger instance for you right now Ohhh, I can\u0026rsquo;t do that! The SpecialLogger receives a LogConfiguration in its constructor. I don\u0026rsquo;t even know what it is and I don\u0026rsquo;t know how to create it!  It\u0026rsquo;s time to teach CDI how to get the job done and create the LogConfiguration class!\n#4: Creating a Factory With the @Produces Annotation It\u0026rsquo;s time to create a Factory to create the SpecialLogger based on the LogConfiguration:\npublic class SpecialLoggerFactory { public SpecialLogger createLogger() { LogConfiguration logInDebugMode = new LogConfiguration(true, false); return new SpecialLogger(logInDebugMode); } } It\u0026rsquo;s a pretty simple Factory class. It has the method createLogger(), which returns a LogConfiguration object.\nBut CDI doesn\u0026rsquo;t know about this class yet or its method! Let\u0026rsquo;s use the annotation @Produces.\npublic class SpecialLoggerFactory { @Produces public SpecialLogger createLogger() { LogConfiguration logInDebugMode = new LogConfiguration(true, false); return new SpecialLogger(logInDebugMode); } }  @Produces indicates to CDI that the method createLogger() should be used when a LogConfiguration object is needed\n The @Produces annotation will say to CDI:\n Hey CDI, please, use the createLogger() method when you need to Inject a SpecialLogger object in some place\n Of course, the returned object of the method createLogger() must be the same type that you\u0026rsquo;re interested in, in this case, the SpecialLogger. Generics for an upcoming post 😏.\nThat\u0026rsquo;s it! I really hope that this article could be helpful to you!\nIn the next part, we\u0026rsquo;re going to be hacking some code with CDI and Qualifiers\nSee you on Twitter for more updates :)\nLet\u0026rsquo;s keep in touch and don\u0026rsquo;t forget to signup for my weekly newsletter 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/java/cdi-series/cdi-in-java-series-part-1-creating-a-factory-using-produces-annotation/","tags":["CDI Series","Beginners Tutorial"],"title":"CDI in Java - Part 1 - Creating a Factory with @Produces Annotation"},{"categories":["Java"],"contents":"Hey!\nThis post is coming this week, I promise 😅\nJust join my newsletter to receive all updates :)\n","permalink":"https://www.alexgama.io/java/cdi-series/cdi-in-java-series-part-3-events-and-observers/","tags":["CDI Series","Beginners Tutorial"],"title":"CDI in Java - Part 3 - Events and Observers"},{"categories":["Java"],"contents":"Hey!\nThis post is coming this week, I promise 😅\nJust join my newsletter to receive all updates :)\n","permalink":"https://www.alexgama.io/java/cdi-series/cdi-in-java-series-part-4-lazy-initialization/","tags":["CDI Series","Beginners Tutorial"],"title":"CDI in Java - Part 4 - Lazy Initialization"},{"categories":["Java"],"contents":"Hey!\nThis post is coming this week, I promise 😅\nJust join my newsletter to receive all updates :)\n","permalink":"https://www.alexgama.io/java/cdi-series/cdi-in-java-series-part-5-interceptors/","tags":["CDI Series","Beginners Tutorial"],"title":"CDI in Java - Part 5 - Interceptors"},{"categories":["Java"],"contents":"Hey!\nThis post is coming this week, I promise 😅\nJust join my newsletter to receive all updates :)\n","permalink":"https://www.alexgama.io/java/cdi-series/cdi-in-java-series-part-6-dependency-injection-alternatives/","tags":["CDI Series","Beginners Tutorial"],"title":"CDI in Java - Part 6 - Dependency Injection and Alternatives"},{"categories":["Java"],"contents":"Hey!\nThis post is coming this week, I promise 😅\nJust join my newsletter to receive all updates :)\n","permalink":"https://www.alexgama.io/java/cdi-series/cdi-in-java-series-part-7-decorators/","tags":["CDI Series","Beginners Tutorial"],"title":"CDI in Java - Part 7 - Decorators"},{"categories":["Marketing"],"contents":"Hey!\nRunning out of time? Short answer: No. I wouldn\u0026rsquo;t worry about that at all\nMore curious? How does a subfolder look like?\nYou might have this\nhttps://www.alexgama.io/personal/i-am-a-very-slow-thinker/\nOr you might have this\nhttps://www.alexgama.io/reviews/podcast/podcast-review-1-how-to-create-content-daily/\nBoth are using subfolders, which almost represent a category in my case:\n/personal/\n/reviews/podcast/\n/reviews/books/\nDoes Google differentiate URLs with less or more subfolders? According to Google, Noup. Google doesn\u0026rsquo;t give a higher ranking based on the number of subfolders.\nGoogle looks at the way you structure your site and Google loves to see a good connection between your URLs and how easy it is to navigate between them.\nWhat about the usability? In my opinion, it seems nicer to just share a simpler URL, like this:\nhttps://www.alexgama.io/i-am-a-very-slow-thinker/\n It\u0026rsquo;s easier to read It\u0026rsquo;s easier to share It\u0026rsquo;s easier to remember and pay attention  Compared with\nSo, why don\u0026rsquo;t you just use the second one? 😒\n2 Reasons\nReason 1 - It\u0026rsquo;s more maintainable when it comes to writing new posts and editing old ones.\nI\u0026rsquo;m using Hugo with GitHub btw\nBut with Hugo I can easily indicate aliases, which allows me to use the simpler URL\naliases: - /personal/i-am-a-very-slow-thinker/ - /blog/i-am-a-very-slow-thinker/ - /i-am-a-very-slow-thinker/ Reason 2 - It works like a wrapper of posts, for that category\nhttps://www.alexgama.io/personal/\nThe URL above shows all of the posts under that subfolder. Nice!\nThat\u0026rsquo;s all for today and thanks for the visit!\nLet\u0026rsquo;s keep in touch 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/marketing/does-google-search-ranking-hate-my-subfolders/","tags":["SEO"],"title":"Does Google Search Ranking Hate My Subfolders?"},{"categories":["Podcast Review"],"contents":"Hey friend!\nRunning out of time today 😅\nPodcast of the day\nMy notes:\nHope to spend some time tomorrow exploring more concepts and updating this post.\nLet\u0026rsquo;s keep in touch 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/reviews/podcast/podcast-review-2-graphql-benefits-costs/","tags":["Productivity"],"title":"Podcast Review #2: GraphQL's Benefits and Costs"},{"categories":["Podcast Review"],"contents":"Hey friend!\nI usually take some terrible handwritten notes when I\u0026rsquo;m reading a book and lately I\u0026rsquo;ve been following the same approach while listening podcasts\nIt helps me:\n Keeping my podcast list really short. Taking notes is really time consuming Being more active when it comes to consuming data Keeping my memory in some artificial place. The physical place is usually terrible When I need to revisit the most important lessons I\u0026rsquo;ve learned in the month  So I was wondering, why not share them? Let\u0026rsquo;s the journey begin..\nPodcast Review #1: How to create content daily I\u0026rsquo;m starting this kind of blog category here. Podcast Reviews.\nGoal?\n for folks who want to just see a review and decide if the topic is interesting for folks who want to just discover more content for folks who want to just laugh at my notes  Let\u0026rsquo;s start with the first episode in this series, which is from an amazing Podcast from Sean McCabe and Ben Toalson: How to create content daily\nIf you want to go to sleep, just take 2 notes:\nIf you have more time (or the same amount of time but a great level of curiosity)\nPodcast Focus We should create content daily (genius).\nSean and Ryan go from some important motivations behind this idea:\n you can avoid overthinking and just do it: share content probably you will spend the same amount of time doing it daily when comparing with doing it weekly you\u0026rsquo;ll learn way more faster putting content online and getting feedback  How to Here Sean and Ryan explore some patterns to follow\n first of all, forget imperfections. Just embrace it and learn through the journey and feedbacks split the content into several different parts and share them over the week recording a podcast? film yourself while you\u0026rsquo;re recording. You can share some important pieces via social media improve quality over time, but forget it for now. Focus on quantity with consistency even with fancy gear, you can keep it simple when it comes to sharing single pieces of content don\u0026rsquo;t worry about social media rules. Do you get something that  Biggest Lesson for me Keep it simple and forget imperfections. Share your journey, your progress. Document it.\nPeople love real life and real life has behind the scenes. We always love waiting to see the behind the scenes.\nLet\u0026rsquo;s keep in touch 🙂\nTwitter Youtube Linkedin\n","permalink":"https://www.alexgama.io/reviews/podcast/podcast-review-1-how-to-create-content-daily/","tags":["Productivity"],"title":"Podcast Review #1: How to create content daily"},{"categories":["Frameworks"],"contents":"Hey friends!\nThis will be really short, I promise. This is the discovery of the day and I want to share it.\nAre you immersed in the JavaScript world? Or are you just getting started?\nIn both contexts probably you have heard about React. Old like me? Probably React.js\nReact Just a terrible overview:\n React is a JavaScript library React allows us to build rich user interfaces React allows us to build single-page applications React allows us to build mobile applications React is based on components  One interesting point is that React allows us to manipulate/render data. This is a more Stateless approach, which means that React has a short memory, on purpose btw.\n Request A renders my name on the page Request B completely forgets the rendered name  But usually, life works in mysterious ways and we need to know what happened previously. That\u0026rsquo;s when State Management comes handy.\nReact has friends. React has an important friend. Redux\nRedux If you want to have a good memory, if you want to be aware of the data you\u0026rsquo;re rendering between requests, then you\u0026rsquo;re thinking about Redux\nMy terrible overview again:\n Redux is a JavaScript Library (makes some sense, isn\u0026rsquo;t it?) Redux manages the application state Follows the reducing function approach (which I\u0026rsquo;m gonna tell you more about later)  it sounds that React has a new friend for State Management. Welcome Recoil :)\nRecoil I\u0026rsquo;ve just discovered Recoil from Twitter, as we discover everything in life.\nTo be honest, I don\u0026rsquo;t know yet how it works but the pitch is great\n You can share state easily Functional concepts in its core Create subscriptions to listen events asynchronously (my dream is to write this word correctly on the first attempt) Amazing granularity with Atoms and Selectors  If I have some time, I\u0026rsquo;ll play around with Recoil on my weekend and give you guys a better and detailed description.\nThanks for stopping by and see you tomorrow :)\nLet\u0026rsquo;s keep in touch 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/javascript/planning-to-manage-state-with-react-welcome-recoil/","tags":["GraphQL","Architecture"],"title":"Planning to Manage State with React? Welcome Recoil"},{"categories":["Architecture"],"contents":"Hey!\nAs I\u0026rsquo;ve documented here I\u0026rsquo;m documenting my journey in creating content, mostly related to Coding, Architecture, Frameworks but also related to Leadership, Startups, and Product Management, which are topics that I really love and learning a lot.\nThis will be a short intro to my blog set up. In the upcoming posts, I\u0026rsquo;ll describe other options and the \u0026ldquo;whys\u0026rdquo; behind the scenes\nStatic Site Generators (SSG) versus Content Management Systems (CMS) That was the first decision. Which one should I use?\nI wanted:\n A blazing fast blog Amazing Markdown support The possibility of avoiding databases usage Just worry about writing content  The requirements matched with Static Site Generators. Simple.\nDon\u0026rsquo;t get me wrong again, CMSs are amazing also. We can even work with cache, JavaScript, etc to have a faster website, but this is a story for another post\nHugo vs Jekyll vs Gatsby vs Next All of them are amazing! Really!\nI picked **Hugo.\n Fast Simple Written in Go (I personally love) Really fast compilation Flexibility with Shortcodes and Markdown Good themes  Again. Don\u0026rsquo;t get me wrong. Most of them have the same characteristics. Sometimes it\u0026rsquo;s just a personal choice, but I\u0026rsquo;ll dissect my choices later\nHosting and Deployment Hugo provides us a beautiful list of places where you can host your site. Hugo renders static pages so you can probably host it anywhere\nHere is a small list:\n AWS Amplify Firebase AWS S3 GitLab Github Pages Netlify  I picked Github Pages\n It\u0026rsquo;s free It\u0026rsquo;s easy You can commit your posts It supports custom domains  Terribly short. I know. I just wanted to give you a taste of how my blog setup looks like\nNext posts I\u0026rsquo;ll explore a few important points:\n My personal comparison between Hugo and Jekyll How to set up an entire blog from scratch using Hugo, GitHub Pages and Godaddy How to choose a specific Hugo Theme How to write your first posts  That\u0026rsquo;s it for today! Thanks for stopping by :)\nLet\u0026rsquo;s keep in touch 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/frontend/my-blog-setup-long-story-short-going-through-hugo-github-pages/","tags":["Blog","Go"],"title":"My Blog Set Up - Long Story Short going through Hugo and Github Pages"},{"categories":["Personal"],"contents":"Guilty!\nI don\u0026rsquo;t know about you, but when it comes to personal stuff, I overthink everything.\nI\u0026rsquo;ve been waiting for hitting the record button to start youtube videos for more than 3 years! Just a quick note: I haven\u0026rsquo;t hit the button yet ¬¬\nToday I came across this Documenting instead of Creating process and I really loved the idea. Simple and powerful.\nThe way that Sean McCabe puts it really clicks with me. I\u0026rsquo;ve heard about the process before but for some reason I\u0026rsquo;m taking action just right now.\nWhat I desired to do with videos and blog posts? Well, I\u0026rsquo;d like to share content related to topics that I really love, that I\u0026rsquo;m learning and that I have no clue on how to get started\n Coding and Technology Productivity Leadership Business History Lifestyle Music  And the list goes on and on\nBut as a good overthinking person as I am, a have a full and complete set of questions that makes a good job in keeping me far away from my goals in sharing content:\n I\u0026rsquo;m not an English native speaker and I\u0026rsquo;ve learned (I\u0026rsquo;m still learning) English too old. I need to practice for more 5 years to be good enough I don\u0026rsquo;t have the right Youtube gear. What about spending the next 3 years on weekends studying Youtube gears to be good enough? People don\u0026rsquo;t care about what I want to say. Do I have to be creative to get attention? It\u0026rsquo;s a crowded world with amazing content. Why should I bother the world with what I\u0026rsquo;m thinking? This is wrong. It doesn\u0026rsquo;t have good quality. I\u0026rsquo;ll start it over again I have to find the perfect font for this blog What\u0026rsquo;s worth sharing? No one wants to see this  And the list goes on and one again\nAnd you find yourself stuck with a list of things that you can\u0026rsquo;t even see how to get started.\nAnd when you start looking for some answers about overthinking, a few interesting answers come up\nAnd then\nOk Google, that\u0026rsquo;s enough for today\nI don\u0026rsquo;t know about you, but when it comes to professional life, things are really different. For some bizarre reason!\n I\u0026rsquo;m super pragmatic, energetic, and I want to get things done as soon as possible with all of the imperfections because it\u0026rsquo;s amazing to adjust things along the way. It\u0026rsquo;s a beautiful and remarkable process. It really is.\n So, today is a really important day for me :)\nI\u0026rsquo;ll start embracing this terrible and uncomfortable zone of sharing content without overthinking things.\nI\u0026rsquo;ll start documenting the journey instead of overthinking about the content.\nI\u0026rsquo;m going to face a lot of problems, imperfections, issues, people laughing at my grammar and pronunciation mistakes and to be honest, for some reason (maybe I\u0026rsquo;m getting too old to care about), I\u0026rsquo;m totally ok with that\nI\u0026rsquo;m going to capture this journey, the issues, the process I\u0026rsquo;m using to surround those issues and then, who knows, I\u0026rsquo;ll look at this in 10 years and I\u0026rsquo;ll be happy to just have started\nStay tuned if you want to see where it goes :)\nLet\u0026rsquo;s keep in touch 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/personal/documenting-instead-of-creating-starting-the-journey/","tags":["Personal"],"title":"Documenting instead of Creating. Starting the Journey"},{"categories":["Personal"],"contents":"I came across this post titled \u0026ldquo;I\u0026rsquo;m very slow thinker\u0026rdquo; by Derek Sivers and I really liked it. Not just because it\u0026rsquo;s well written but because it\u0026rsquo;s a detailed description of myself\nI usually take a lot of time thinking about questions. In meetings, I usually take notes. Lots of them, even in my head. I want to process them later.\nDo you want to ask me a question in the middle of the meeting? \u0026ldquo;I\u0026rsquo;m thinking about it\u0026rdquo; will be the default answer, unless you press me firmly against the wall.\nSurprisingly, I usually have an answer and opinions for everything. Even for subjects that I don\u0026rsquo;t know or that I don\u0026rsquo;t care that much.\nBeing these answers and options right or wrong, I have them.\nThat\u0026rsquo;s an interesting scenario since I still want to think about my own opinions. The motivation? Challenging myself. A temptation to avoid some kind of cognitive bias. Or simply, I\u0026rsquo;m too slow\nProbably my first reaction, answer, and motivation will be outdated. I really believe that.\nIf I answer something really quickly, then in the second later, I\u0026rsquo;m trying to invalidate what I\u0026rsquo;ve sad.\nI\u0026rsquo;m not smart enough to have quick answers that are deep and valuable. I prefer to think about them for 5, 10 minutes. Maybe I\u0026rsquo;ll give you an answer next week.\nI\u0026rsquo;ll grab a beer and I promise thinking about your question while I\u0026rsquo;m sitting on my balcony\nBut I completely understand the art of imperfection and speed. And making decisions. I really do.\nIncomplete answers that can be improved over time. You can compound different perspectives while being in a discussion.\n\u0026ldquo;good is better than perfect\u0026rdquo; someone says. It\u0026rsquo;s outdated but true.\nProbably the brain side that knows it is different from the brain side that takes actions, that answers questions. Who knows.\nAs Derek says, this probably makes me stupid. Different from him, I\u0026rsquo;m usually worried about it. The acceptance phase is still coming. I\u0026rsquo;m waiting. With a beer, on my balcony.\nLet\u0026rsquo;s keep in touch 🙂\nTwitter Youtube Instagram Linkedin\n","permalink":"https://www.alexgama.io/personal/i-am-a-very-slow-thinker/","tags":["Personal"],"title":"I'm a Very Slow Thinker"},{"categories":["Personal"],"contents":"Hey!\nThis is my first Weekly Review and I\u0026rsquo;m planning to do this just to force me thinking about the lessons learned and new discoveries.\nLet\u0026rsquo;s see if this is something valuable or not\nThis week was amazing! For 2 main reasons:\n Great discussions and tactical movements at our company. Really excited about what is coming 🚀 I started my journey in creating content. Finally :)  Social I\u0026rsquo;ve discovered Twitter and Linkedin again. Two completely different goals but they each have their places\nIt was great to see again how much I can learn while scrolling Twitter for 2 minutes. Of course, it depends on the type of people you follow\nPodcasts I\u0026rsquo;ve discovered this amazing Podcast from Sean McCabe. Fantastic! For the next week I\u0026rsquo;ll try a new experiment: I\u0026rsquo;ll share Podcasts Overview.\nYoutube I\u0026rsquo;ve finally hit the record button. Finally! It was tough. Really tough.\nMy voice is weird, my English is not good, you would completely forget your own name when you\u0026rsquo;re talking to the camera alone\nI hope to get better soon.\nBlog I\u0026rsquo;ve started one important commitment: write a piece of content every single day. That\u0026rsquo;s a hard but remarkable challenge! I\u0026rsquo;ve posted only 3 posts\nsince I decided to do that\n  Documenting instead of Creating. Starting the Journey\n  I’m a Very Slow Thinker\n  My Blog Set Up - Long Story Short going through Hugo and Github Pages\n  Just a quick note: it\u0026rsquo;s not easy to write a personal post. Really. But being vulnerable brings you to an interesting good environment, mentally at least.\nBooks I\u0026rsquo;ve finished The Ride of a Lifetime by Bob Iger, CEO of Disney (former CEO now) and I\u0026rsquo;m preparing a book review. It was an amazing ride, btw\nStats of this Week I\u0026rsquo;ve shared my posts on Medium. Well, 3 views 😅. I\u0026rsquo;m not \u0026ldquo;how many views I\u0026rsquo;m having\u0026rdquo; kind of person and I don\u0026rsquo;t care that much about theses numbers\nBut hopefully Medium will like me a little bit more in the future :)\nAnalytics says a little bit different history. It seems a good start but I have no idea yet.\nI wouldn\u0026rsquo;t count these page views since they\u0026rsquo;re probably coming from myself setting up the blog 😬\nThat\u0026rsquo;s it!\nTerribly short but just to get the ball rolling.\nSee you and thanks for stopping by :)\n","permalink":"https://www.alexgama.io/personal/weekly-review-1/","tags":["Personal"],"title":"Weekly Review #1"}]